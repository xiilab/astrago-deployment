# Default values for uyuni-suite-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# frontend values define
uyuni:
  uyuni-frontend:

# backend values define
  core:
    image:
      repository: "{{ .Values.uyuni.core.repository }}"
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "{{ .Values.uyuni.core.imageTag }}"
  batch:
    image:
      repository: "{{ .Values.uyuni.batch.repository }}"
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "{{ .Values.uyuni.batch.imageTag }}"
  monitor:
    image:
      repository: "{{ .Values.uyuni.monitor.repository }}"
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "{{ .Values.uyuni.monitor.imageTag }}"
  mariadb:
    ## @param nameOverride String to partially override mariadb.fullname
    ##
    nameOverride: ""
    ## @param fullnameOverride String to fully override mariadb.fullname
    ##
    fullnameOverride: "mariadb"
    ## @param architecture MariaDB architecture (`standalone` or `replication`)
    ##
    architecture: standalone
    ## MariaDB Authentication parameters
    ##
    auth:
      ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided.
      ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-the-root-password-on-first-run
      ##
      rootPassword: "root"
      ## @param auth.database Name for a custom database to create
      ## ref: https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-on-first-run
      ##
      database: uyuni
      ## @param auth.username Name for a custom user to create
      ## ref: https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-user-on-first-run
      ##
      username: "uyuni"
      ## @param auth.password Password for the new user. Ignored if existing secret is provided
      ##
      password: "xiirocks"
      ## @param auth.replicationUser MariaDB replication user
      ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-up-a-replication-cluster
      ##
      replicationUser: replicator
      ## @param auth.replicationPassword MariaDB replication user password. Ignored if existing secret is provided
      ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-up-a-replication-cluster
      ##
      replicationPassword: ""

    primary:
      configuration: |-
        [mysqld]
        skip-name-resolve
        explicit_defaults_for_timestamp
        basedir=/opt/bitnami/mariadb
        plugin_dir=/opt/bitnami/mariadb/plugin
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        tmpdir=/opt/bitnami/mariadb/tmp
        max_allowed_packet=16M
        bind-address=*
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
        log-error=/opt/bitnami/mariadb/logs/mysqld.log
        character-set-server=UTF8
        collation-server=utf8_general_ci
        slow_query_log=0
        slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
        long_query_time=10.0
        interactive_timeout=1803
        wait_timeout=1803

        [client]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        default-character-set=UTF8
        plugin_dir=/opt/bitnami/mariadb/plugin

        [manager]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

      persistence:
        ## @param primary.persistence.enabled Enable persistence on MariaDB primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
        ##
        enabled: true
        ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MariaDB primary replicas
        ## NOTE: When it's set the rest of persistence parameters are ignored
        ##
        existingClaim: ""
        ## @param primary.persistence.subPath Subdirectory of the volume to mount at
        ##
        subPath: ""
        ## @param primary.persistence.storageClass MariaDB primary persistent volume storage Class
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        storageClass: ""
        ## @param primary.persistence.annotations MariaDB primary persistent volume claim annotations
        ##
        annotations: {}
        ## @param primary.persistence.accessModes MariaDB primary persistent volume access Modes
        ##
        accessModes:
          - ReadWriteOnce
        ## @param primary.persistence.size MariaDB primary persistent volume size
        ##
        size: 8Gi
        ## @param primary.persistence.selector Selector to match an existing Persistent Volume
        ## selector:
        ##   matchLabels:
        ##     app: my-app
        ##
        selector: {}

    secondary:
      ## @param secondary.configuration [string] MariaDB Secondary configuration to be injected as ConfigMap
      ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
      ##
      configuration: |-
        [mysqld]
        skip-name-resolve
        explicit_defaults_for_timestamp
        basedir=/opt/bitnami/mariadb
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        tmpdir=/opt/bitnami/mariadb/tmp
        max_allowed_packet=16M
        bind-address=0.0.0.0
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
        log-error=/opt/bitnami/mariadb/logs/mysqld.log
        character-set-server=UTF8
        collation-server=utf8_general_ci
        slow_query_log=0
        slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
        long_query_time=10.0

        [client]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        default-character-set=UTF8

        [manager]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

      persistence:
        ## @param secondary.persistence.enabled Enable persistence on MariaDB secondary replicas using a `PersistentVolumeClaim`
        ##
        enabled: true
        ## @param secondary.persistence.subPath Subdirectory of the volume to mount at
        ##
        subPath: ""
        ## @param secondary.persistence.storageClass MariaDB secondary persistent volume storage Class
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        storageClass: ""
        ## @param secondary.persistence.annotations MariaDB secondary persistent volume claim annotations
        ##
        annotations: {}
        ## @param secondary.persistence.accessModes MariaDB secondary persistent volume access Modes
        ##
        accessModes:
          - ReadWriteOnce
        ## @param secondary.persistence.size MariaDB secondary persistent volume size
        ##
        size: 8Gi
        ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
        ## selector:
        ##   matchLabels:
        ##     app: my-app
        ##
        selector: {}
