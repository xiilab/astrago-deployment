# Cursor Rules for Astrago Deployment Project

## 🎯 프로젝트 기본 설정

### 언어 및 응답
- 항상 한국어로 응답
- 기술 용어는 영어 그대로 사용 (예: Helm chart, Kubernetes)

### 코드 스타일
- Python: PEP 8 준수
- Go: gofmt 표준 준수
- YAML: 2-space 들여쓰기

## 📋 Linear Issue 관리 규칙

### Issue 생성 필수 요소

모든 업무는 반드시 Linear 앱 내에서 '이슈(Issue)'로 생성되어야 합니다.

#### 필수 설정 항목
1. **제목 (Title)**: 명확하고 구체적인 제목
2. **담당자 (Assignee)**: 기본값 `m.kwon` (권문섭)
3. **팀 (Team)**: `Back-end` (대부분의 경우)
4. **우선순위 (Priority)**:
   - `1 (Urgent)`: 시스템 장애, 보안 이슈, 블로커
   - `2 (High)`: 중요한 기능, 성능 이슈
   - `3 (Normal)`: 일반적인 기능 개발 (기본값)
   - `4 (Low)`: 개선사항, 리팩토링

5. **예상 소요 시간 (Estimate)**:
   - `0 point`: 10분 이내 (매우 간단)
   - `1 point`: 0.5일 이내 (단순 개발)
   - `2 point`: 1-1.5일
   - `3 point`: 2일 (핵심 기능)
   - `5 point`: 3일+ (나눌 수 없는 큰 작업)
   - `8 point`: 1주일+ (매우 어려운 작업)

6. **라벨 (Labels)**:
   - `🚀 Feature`: 새로운 기능
   - `🐛 Bug`: 버그 수정
   - `📈 Improvement`: 기능 개선
   - `🔄 Refactor`: 리팩토링
   - `📚 Documentation`: 문서화

### Issue 설명 템플릿

Linear 이슈 생성 시 다음 템플릿을 사용:

```markdown
## 🎯 이슈 요약
[한 줄로 문제/요구사항 요약]

## 📋 상세 설명
### 현재 상황
- [현재 어떤 상태인지]
- [문제가 되는 부분이 있다면]

### 기대 결과
- [완료되었을 때 어떤 상태가 되어야 하는지]
- [성공 기준은 무엇인지]

## 🔧 작업 범위
### 주요 작업
- [ ] [구체적인 작업 1]
- [ ] [구체적인 작업 2]
- [ ] [구체적인 작업 3]

### 기술적 요구사항
- [사용할 기술/프레임워크]
- [고려해야 할 제약사항]

## 📎 참고자료
- [관련 문서 링크]
- [참고할 이슈/PR]
- [외부 리소스]

## ⚠️ 주의사항
- [특별히 주의해야 할 점]
- [다른 작업과의 의존성]
```

### Issue 생성 자동화

복잡한 작업 시작 시 자동으로 Linear 이슈 생성:

1. **리팩토링 작업**: 자동으로 Phase별 이슈 생성
2. **버그 수정**: 근본 원인 분석 후 이슈 생성
3. **새로운 기능**: 기능 명세 확정 후 이슈 생성

### Issue 상태 관리 워크플로우 ⭐

**모든 업무는 반드시 이 사이클을 따릅니다:**

1. **업무 시작 전**: Linear 이슈 생성 → 상태: `Todo`
2. **작업 시작 시**: 상태를 `In Progress`로 변경
3. **작업 완료 시**: 상태를 `Done`으로 변경

**상태 정의:**
- `Todo`: 아직 시작하지 않음 (이슈 생성 시 기본값)
- `In Progress`: 현재 작업 중
- `Done`: 완료 (테스트 및 검증 완료)
- `Cancelled`: 취소됨

### Cycle 관리

- 모든 이슈는 현재 활성 Cycle에 할당
- Cycle 번호는 자동으로 가장 최신 Cycle 사용

## 🔧 Git Workflow

### 브랜치 네이밍
- `refactor/[폴더명]`: 리팩토링 작업
- `feature/[기능명]`: 새로운 기능
- `bugfix/[이슈번호]`: 버그 수정
- `hotfix/[이슈설명]`: 긴급 수정

### 커밋 메시지
- 영어로 작성
- 명확하고 간결하게
- 형식: `[type] subject`
  - `feat`: 새로운 기능
  - `fix`: 버그 수정
  - `refactor`: 리팩토링
  - `test`: 테스트 추가/수정
  - `docs`: 문서 수정

## 📝 문서화 규칙

### README 업데이트
- 새로운 기능 추가 시 README 업데이트
- 테스트 커버리지 표 최신 상태 유지
- 아키텍처 다이어그램 변경 시 업데이트

### 코드 주석
- 복잡한 로직에는 한국어 주석 추가
- Public 함수/메서드는 docstring 필수
- TODO 주석에는 Linear 이슈 번호 포함

## 🧪 테스트 규칙

### 테스트 작성 원칙
- 새로운 기능에는 테스트 필수
- 버그 수정 시 회귀 테스트 추가
- 목표 커버리지: 70% 이상

### 테스트 실행
- 커밋 전 `make test` 실행
- PR 생성 전 전체 테스트 통과 확인

## 🚀 배포 규칙

### 오프라인 배포
- 이미지 추출 후 실제 클러스터와 비교 검증
- Kubernetes 시스템 이미지는 제외
- Helm chart 관련 이미지만 추출

### 검증 절차
1. 이미지 추출 실행
2. 클러스터 실행 중인 이미지 수집
3. 비교 분석 및 누락 확인
4. 리포트 생성

## 💡 AI Assistant 활용

### Linear Issue 자동화 워크플로우 ⭐

사용자가 "이슈 등록해줘", "/sc/implement" 또는 작업 요청 시:

**Phase 1: 이슈 생성 (상태: Todo)**
1. 자동으로 위의 템플릿 사용
2. 담당자: 기본 `m.kwon`
3. 팀: `Back-end`
4. 우선순위: 작업 복잡도에 따라 자동 설정 (기본: Normal)
5. Estimate: 작업 범위에 따라 0-8 point
6. 현재 활성 Cycle에 자동 할당
7. **초기 상태: `Todo`** ← 중요!

**Phase 2: 작업 시작 (상태: In Progress)**
1. AI가 실제 작업을 시작하기 전에
2. Linear 이슈 상태를 `Todo` → `In Progress`로 변경
3. 코멘트로 작업 시작 알림 (선택)

**Phase 3: 작업 완료 (상태: Done)**
1. 모든 작업이 완료되면
2. Linear 이슈 상태를 `In Progress` → `Done`으로 변경
3. 코멘트로 완료 요약 추가 (주요 변경사항, 테스트 결과 등)

## 🎯 프로젝트별 특수 규칙

### Astrago Deployment
- Helmfile 기반 배포 구조 유지
- 오프라인 배포 대비 필수
- GPU Operator, Harbor, Keycloak 등 핵심 차트 지원

### Image Extractor
- operators.yaml 기반 확장성 우선
- 하드코딩 금지
- 테스트 커버리지 70% 이상 유지

---

**이 파일은 Cursor AI가 자동으로 참조합니다.**
**프로젝트 규칙 변경 시 이 파일을 업데이트하세요.**

