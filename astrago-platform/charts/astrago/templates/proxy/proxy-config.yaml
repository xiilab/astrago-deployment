apiVersion: v1
kind: ConfigMap
metadata:
  name: astrago-nginx-config
  namespace: {{ .Release.Namespace }}
data:
  nginx.conf: |
    # Nginx 설정 파일
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log /var/log/nginx/access.log main;

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      proxy_buffer_size   128k;
      proxy_buffers   4 256k;
      proxy_busy_buffers_size   256k;
      large_client_header_buffers  8 8k;

      # 파일 업로드 용량 제한을 100MB로 설정
      client_max_body_size 0;

      server {
        listen 80;

        location / {
          proxy_pass http://astrago-frontend:3000;
        }

        location /api/v1/core/ {
          proxy_pass http://astrago-backend-core:8080/api/v1/core/;
          proxy_connect_timeout 300;
          proxy_send_timeout 300;
          proxy_read_timeout 300;
          send_timeout 300;
        }

        location /api/v1/monitor/ {
          proxy_pass http://astrago-backend-monitor:8080/api/v1/core/monitor/;
        }

        location /api/v1/batch/ {
          proxy_pass http://astrago-backend-batch:8080/api/v1/batch/;
        }

        location /api/v1/report/ {
          proxy_pass http://astrago-backend-monitor:8080/api/v1/monitor/report/;
        }

        location /api/v1/predict {
          proxy_pass http://astrago-time-prediction:8000/api/v1/predict/;
        }

        # Loki API 프록시 - 로그 조회를 직접 Loki로 전달
        location /api/v1/logs/ {
          proxy_pass http://loki-stack-loki.loki-stack.svc:3100/loki/api/v1/;
          proxy_connect_timeout 300;
          proxy_send_timeout 300;
          proxy_read_timeout 300;
          send_timeout 300;
          
          # CORS 헤더 설정
          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
          add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
          
          # OPTIONS 요청 처리 (CORS preflight)
          if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
          }
        }

        # Loki 실시간 스트리밍 (WebSocket/SSE)
        location /api/v1/logs/tail {
          proxy_pass http://loki-stack-loki.loki-stack.svc:3100/loki/api/v1/tail;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cache_bypass $http_upgrade;
          proxy_read_timeout 86400;
        }

        location /auth/ {  # '/auth/'로 경로를 명확히 지정
          proxy_pass http://keycloak.keycloak.svc/auth/;

          # 요청의 Host 헤더에서 포트를 추출하여 X-Forwarded-Port로 설정
          set $forwarded_port "";
          if ($http_host ~* ":(\d+)$") {
            set $forwarded_port $1;
          }

          proxy_set_header X-Forwarded-Host $host;
          proxy_set_header X-Forwarded-Port $forwarded_port;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }

        # '/auth'로 요청이 들어오면 '/auth/'로 리디렉션
        location = /auth {
          return 301 $scheme://$http_host/auth/;                
        }

        # 웹소켓 프록시 설정
        location /ws/workload/ {
            proxy_pass http://astrago-backend-core:8080/ws/workload/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }
      }
    }
