expose:
  type: nodePort
  tls:
    enabled: false
  nodePort:
    name: harbor
    ports:
      http:
        port: 80
        nodePort: 30002
      https:
        port: 443
        nodePort: 30003
externalURL: http://{{ .Values.externalIP }}:{{ .Values.harbor.servicePort }}
persistence:
  enabled: true
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      existingClaim: ""
      storageClass: "{{ .Values.nfs.storageClassName }}"
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
      annotations: {}
    jobservice:
      jobLog:
        existingClaim: ""
        storageClass: "{{ .Values.nfs.storageClassName }}"
        subPath: ""
        accessMode: ReadWriteOnce
        size: 1Gi
        annotations: {}
    database:
      existingClaim: ""
      storageClass: "{{ .Values.nfs.storageClassName }}"
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
      annotations: {}
    redis:
      existingClaim: ""
      storageClass: "{{ .Values.nfs.storageClassName }}"
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
      annotations: {}
    trivy:
      existingClaim: ""
      storageClass: "{{ .Values.nfs.storageClassName }}"
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
      annotations: {}

harborAdminPassword: "{{ .Values.harbor.adminPassword }}"

nginx:
  image:
    repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/nginx-photon"
portal:
  image:
    repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/harbor-portal"
core:
  image:
    repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/harbor-core"
jobservice:
  image:
    repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/harbor-jobservice"
registry:
  registry:
    image:
      repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/registry-photon"
  controller:
    image:
      repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/harbor-registryctl"
trivy:
  enabled: true
  image:
    repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/trivy-adapter-photon"
database:
  type: internal
  internal:
    image:
      repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/harbor-db"
redis:
  type: internal
  internal:
    image:
      repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/redis-photon"
exporter:
  image:
    repository: "{{ .Values.offline.registry | default "docker.io" }}/goharbor/harbor-exporter"
