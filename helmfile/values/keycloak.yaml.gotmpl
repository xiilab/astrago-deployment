global:
  imageRegistry: "{{ .Values.offline.registry | default "" }}"

image:
  registry: "{{ .Values.keycloak.image.registry | default "docker.io" }}"
  repository: "{{ .Values.keycloak.image.repository | default "xiilab/astrago-keycloak-theme" }}"
  tag: "{{ .Values.keycloak.image.tag | default "v1.2.0" }}"

proxy: edge
production: true
httpRelativePath: "/auth/"

auth:
  adminUser: "{{ .Values.keycloak.adminUser }}"
  adminPassword: "{{ .Values.keycloak.adminPassword }}"
service:
  type: ClusterIP

extraEnvVars:
  - name: KEYCLOAK_EXTRA_ARGS
    value: "--import-realm --spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true"

extraVolumes:
  - name: realm-config
    configMap:
      name: realm-config

extraVolumeMounts:
  - name: realm-config
    mountPath: /opt/bitnami/keycloak/data/import

lifecycleHooks:
  postStart:
    exec:
      command:
        - "/bin/bash"
        - "-c"
        - |
          echo "Starting postStart script" > /opt/bitnami/keycloak/poststart.log
          until curl -sSf http://localhost:8080/auth/realms/master > /dev/null; do
            echo "Waiting for Keycloak to be ready..." >> /opt/bitnami/keycloak/poststart.log
            sleep 5
          done
          /opt/bitnami/keycloak/bin/kcadm.sh update realms/master -s sslRequired=NONE --server http://localhost:8080/auth/ --realm master --user admin --password "{{ .Values.keycloak.adminPassword }}" >> /opt/bitnami/keycloak/poststart.log 2>&1

# Ingress configuration - minimal overrides
ingress:
  enabled: {{ .Values.keycloak.ingress.enabled | default false }}
  ingressClassName: "nginx"
  {{- if .Values.keycloak.ingress.host }}
  hostname: "{{ .Values.keycloak.ingress.host }}"
  {{- end }}
  {{- if .Values.keycloak.ingress.tls.enabled }}
  tls: true
  {{- end }}

postgresql:
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: 16.1.0-debian-11-r9
  auth:
    postgresPassword: postgres
    username: bn_keycloak
    password: keycloak
    database: bitnami_keycloak
  primary:
    persistence:
      enabled: true
      storageClass: "{{ .Values.nfs.storageClassName }}"
