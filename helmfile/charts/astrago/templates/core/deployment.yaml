apiVersion: apps/v1
kind: Deployment
metadata:
  name: astrago-backend-core
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: astrago-backend-core
spec:
  {{- if not .Values.core.autoscaling.enabled }}
  replicas: {{ .Values.core.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: astrago-backend-core
  template:
    metadata:
      {{- with .Values.core.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: astrago-backend-core
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.core.podSecurityContext | nindent 8 }}
      {{- if .Values.ingress.tls.secretName }}
      initContainers:
        - name: ca-cert-installer
          image: "{{ default .Values.global.imageRegistry "docker.io" }}/openjdk:11-jre-slim"
          env:
          - name: DEBUG_MODE
            value: "{{ .Values.global.debugMode | default "false" }}"
          command: ["bash", "-c"]
          args:
          - |
            set -euo pipefail

            # 구조화된 로깅 시스템
            SCRIPT_NAME="tls-cert-installer"
            start_time=$(date '+%s')

            log_info() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] [${SCRIPT_NAME}] $*" >&2
            }

            log_warn() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') [WARN] [${SCRIPT_NAME}] $*" >&2
            }

            log_error() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] [${SCRIPT_NAME}] $*" >&2
            }

            log_debug() {
              if [ "${DEBUG_MODE:-false}" = "true" ]; then
                echo "$(date '+%Y-%m-%d %H:%M:%S') [DEBUG] [${SCRIPT_NAME}] $*" >&2
              fi
            }

            log_success() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') [SUCCESS] [${SCRIPT_NAME}] $*" >&2
            }

            # 상세 인증서 정보 로깅
            log_cert_info() {
              local cert_file="$1"
              local cert_type="$2"

              if [ -f "$cert_file" ]; then
                local subject=$(openssl x509 -subject -noout -in "$cert_file" 2>/dev/null | cut -d= -f2- | sed 's/^ *//')
                local issuer=$(openssl x509 -issuer -noout -in "$cert_file" 2>/dev/null | cut -d= -f2- | sed 's/^ *//')
                local expiry=$(openssl x509 -enddate -noout -in "$cert_file" 2>/dev/null | cut -d= -f2)

                log_info "Certificate Details: type=$cert_type, subject=\"$subject\", issuer=\"$issuer\", expires=\"$expiry\""
              else
                log_error "Certificate file not found: $cert_file"
              fi
            }

            # 인증서 유효성 검증 함수
            validate_cert() {
              local cert_file="$1"
              local cert_type="$2"

              log_debug "Validating certificate: $cert_file (type: $cert_type)"

              if ! openssl x509 -noout -text -in "$cert_file" >/dev/null 2>&1; then
                log_error "Invalid certificate format in $cert_file"
                return 1
              fi

              local expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" 2>/dev/null | cut -d= -f2)
              log_info "$cert_type certificate validation passed, expires: $expiry_date"

              return 0
            }

            # CA 인증서 설치 함수
            install_cert() {
              local cert_file="$1"
              local alias="$2"

              log_debug "Installing certificate: $cert_file with alias: $alias"

              if ! keytool -import -trustcacerts -keystore "$JAVA_HOME/lib/security/cacerts" \
                -storepass changeit -alias "$alias" -file "$cert_file" -noverify 2>/dev/null; then
                log_error "Failed to install certificate $cert_file with alias $alias"
                return 1
              fi

              log_success "Installed certificate $cert_file with alias $alias"
              return 0
            }

            # 시작 로그
            log_info "=== TLS Certificate Installation Started ==="
            log_info "Environment: namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace 2>/dev/null || echo 'unknown'), pod=$(hostname)"
            log_info "Java Version: $(java -version 2>&1 | head -n1 || echo 'unknown')"
            log_debug "JAVA_HOME: $JAVA_HOME"

            # 메인 처리 로직
            cert_installed=false

            log_info "Searching for TLS certificates in /tls-certs/"
            if [ -f /tls-certs/ca.crt ]; then
              log_info "Found CA certificate file"
              log_cert_info "/tls-certs/ca.crt" "CA"

              if validate_cert "/tls-certs/ca.crt" "CA"; then
                log_success "CA certificate validation passed"
                if install_cert "/tls-certs/ca.crt" "custom-ca"; then
                  log_success "CA certificate installed successfully"
                  cert_installed=true
                else
                  log_warn "CA certificate installation failed, continuing with default cacerts"
                fi
              else
                log_error "CA certificate validation failed"
              fi
            elif [ -f /tls-certs/tls.crt ]; then
              log_info "Found TLS certificate file"
              log_cert_info "/tls-certs/tls.crt" "TLS"

              if validate_cert "/tls-certs/tls.crt" "TLS"; then
                log_success "TLS certificate validation passed"
                if install_cert "/tls-certs/tls.crt" "tls-cert"; then
                  log_success "TLS certificate installed successfully"
                  cert_installed=true
                else
                  log_warn "TLS certificate installation failed, continuing with default cacerts"
                fi
              else
                log_error "TLS certificate validation failed"
              fi
            else
              log_info "No custom certificates found, using default Java cacerts"
            fi

            # cacerts 복사 (실패 시에도 계속 진행)
            log_info "Copying cacerts to shared volume..."
            if cp "$JAVA_HOME/lib/security/cacerts" /shared-cacerts/ 2>/dev/null; then
              log_success "Cacerts copied to shared volume successfully"

              # 복사된 파일 정보 로깅
              cacerts_size=$(stat -f%z /shared-cacerts/cacerts 2>/dev/null || stat -c%s /shared-cacerts/cacerts 2>/dev/null || echo "unknown")
              log_info "Shared cacerts size: ${cacerts_size} bytes"
            else
              log_warn "Failed to copy cacerts to shared volume, container will use default cacerts"
              log_warn "TLS certificate trust chain may not be properly configured"
            fi

            # 최종 상태 로그
            if [ "$cert_installed" = true ]; then
              log_success "=== TLS Certificate Installation Completed Successfully ==="
              log_info "Custom certificate installed and integrated with Java cacerts"
            else
              log_info "=== TLS Certificate Installation Completed ==="
              log_info "Using default Java cacerts (no custom certificate installed)"
            fi

            # 실행 시간 로깅
            end_time=$(date '+%s')
            execution_time=$((end_time - start_time))
            log_info "Total execution time: ${execution_time} seconds"
          volumeMounts:
          - name: tls-secret-volume
            mountPath: /tls-certs
            readOnly: true
          - name: shared-cacerts
            mountPath: /shared-cacerts
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.core.securityContext | nindent 12 }}
          image: "{{ default .Values.core.image.registry .Values.global.imageRegistry }}/{{ .Values.core.image.repository }}:{{ .Values.core.image.tag }}"
          imagePullPolicy: {{ .Values.core.image.pullPolicy }}
          env:
          {{- range $key, $obj := .Values.core.env }}
          - name: {{ $obj.name }}
            value: {{ $obj.value | quote }}
          {{- end }}
          volumeMounts:
            - name: astrago-workload-log
              mountPath: /root/astrago
            {{- if .Values.ingress.tls.secretName }}
            - name: shared-cacerts
              mountPath: /usr/local/openjdk-11/lib/security/cacerts
              subPath: cacerts
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.core.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          resources:
            {{- toYaml .Values.core.resources | nindent 12 }}
      volumes:
        - name: astrago-workload-log
          persistentVolumeClaim:
            claimName: workload-log-pvc
        {{- if .Values.ingress.tls.secretName }}
        - name: tls-secret-volume
          secret:
            secretName: {{ .Values.ingress.tls.secretName }}
        - name: shared-cacerts
          emptyDir: {}
        {{- end }}
      {{- with .Values.core.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.core.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.core.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10