apiVersion: apps/v1
kind: Deployment
metadata:
  name: astrago-backend-batch
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: astrago-backend-batch
spec:
  {{- if not .Values.batch.autoscaling.enabled }}
  replicas: {{ .Values.batch.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: astrago-backend-batch
  template:
    metadata:
      {{- with .Values.batch.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: astrago-backend-batch
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.batch.podSecurityContext | nindent 8 }}
      {{- if .Values.ingress.tls.secretName }}
      initContainers:
        - name: ca-cert-installer
          image: "{{ default .Values.global.imageRegistry "docker.io" }}/openjdk:11-jre-slim"
          command: ["sh", "-c"]
          args:
          - |
            set -euo pipefail
            echo "$(date): Starting TLS certificate installation process"

            # 인증서 유효성 검증 함수
            validate_cert() {
              local cert_file="$1"
              local cert_type="$2"

              if ! openssl x509 -noout -text -in "$cert_file" >/dev/null 2>&1; then
                echo "ERROR: Invalid certificate format in $cert_file" >&2
                return 1
              fi

              local expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" 2>/dev/null | cut -d= -f2)
              echo "INFO: $cert_type certificate expires: $expiry_date"

              return 0
            }

            # CA 인증서 설치 함수
            install_cert() {
              local cert_file="$1"
              local alias="$2"

              if ! keytool -import -trustcacerts -keystore "$JAVA_HOME/lib/security/cacerts" \
                -storepass changeit -alias "$alias" -file "$cert_file" -noverify 2>/dev/null; then
                echo "ERROR: Failed to install certificate $cert_file" >&2
                return 1
              fi

              echo "SUCCESS: Installed certificate $cert_file with alias $alias"
              return 0
            }

            # 메인 처리 로직
            cert_installed=false

            if [ -f /tls-certs/ca.crt ]; then
              echo "INFO: Found CA certificate, validating..."
              if validate_cert "/tls-certs/ca.crt" "CA"; then
                if install_cert "/tls-certs/ca.crt" "custom-ca"; then
                  cert_installed=true
                fi
              fi
            elif [ -f /tls-certs/tls.crt ]; then
              echo "INFO: Found TLS certificate, validating..."
              if validate_cert "/tls-certs/tls.crt" "TLS"; then
                if install_cert "/tls-certs/tls.crt" "tls-cert"; then
                  cert_installed=true
                fi
              fi
            else
              echo "INFO: No custom certificate found, using default cacerts"
            fi

            # cacerts 복사
            if ! cp "$JAVA_HOME/lib/security/cacerts" /shared-cacerts/ 2>/dev/null; then
              echo "ERROR: Failed to copy cacerts to shared volume" >&2
              exit 1
            fi

            if [ "$cert_installed" = true ]; then
              echo "SUCCESS: TLS certificate installation completed successfully"
            else
              echo "INFO: Using default cacerts without custom certificates"
            fi

            echo "$(date): Certificate installation process finished"
          volumeMounts:
          - name: tls-secret-volume
            mountPath: /tls-certs
            readOnly: true
          - name: shared-cacerts
            mountPath: /shared-cacerts
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.batch.securityContext | nindent 12 }}          
          image: "{{ default .Values.batch.image.registry .Values.global.imageRegistry }}/{{ .Values.batch.image.repository }}:{{ .Values.batch.image.tag }}"          
          env:
          {{- range $key, $obj := .Values.batch.env }}
            - name: {{ $obj.name }}
              value: {{ $obj.value | quote }}
          {{- end }}
          volumeMounts:
            - name: astrago-workload-log
              mountPath: /root/astrago
            {{- if .Values.ingress.tls.secretName }}
            - name: shared-cacerts
              mountPath: /usr/local/openjdk-11/lib/security/cacerts
              subPath: cacerts
            {{- end }}

          ports:
            - name: http
              containerPort: {{ .Values.batch.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          resources:
            {{- toYaml .Values.batch.resources | nindent 12 }}
      volumes:
        - name: astrago-workload-log
          persistentVolumeClaim:
            claimName: workload-log-pvc
        {{- if .Values.ingress.tls.secretName }}
        - name: tls-secret-volume
          secret:
            secretName: {{ .Values.ingress.tls.secretName }}
        - name: shared-cacerts
          emptyDir: {}
        {{- end }}
      {{- with .Values.batch.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.batch.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.batch.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 30
