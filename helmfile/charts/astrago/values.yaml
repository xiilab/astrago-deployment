# Default values for uyuni.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  imageRegistry: "192.168.56.11:35000"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "astrago-sa"
core:
  replicaCount: 1
  image:
    registry: docker.io
    repository: xiilab/astrago
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "core-v1.0.82"
  podAnnotations: {}
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8080
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80   
  nodeSelector: {}
  tolerations: []
  affinity: {}
  existingClaim: astrago-workload-log
batch:
  replicaCount: 1
  image:
    registry: docker.io
    repository: xiilab/astrago
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: batch-v1.0.82
  service:
    type: ClusterIP
    port: 8080
  podAnnotations: {}
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  resources:
    limits:
      cpu: 1000m
      memory: 1536Mi
    requests:
      cpu: 500m
      memory: 1Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  existingClaim: astrago-workload-log
monitor:
  replicaCount: 1
  image:
    registry: docker.io
    repository: xiilab/astrago
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: monitor-v1.0.82
  service:
    type: ClusterIP
    port: 8080
  podAnnotations: {}
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
experiment:
  replicaCount: 1
  image:
    registry: docker.io
    repository: xiilab/astrago
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: experiment-v1.0.15
  service:
    type: ClusterIP
    port: 8080
  podAnnotations: {}
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
frontend:
  replicaCount: 1
  image:
    registry: docker.io
    repository: xiilab/astrago
    tag: frontend-v1.0.51
  podAnnotations: {}
  podSecurityContext: {}
  # fsGroup: 2000

  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
# proxy:  # Removed - replaced by nginx ingress
#   image:
#     registry: docker.io
#     repository: library/nginx
#     tag: 1.27.0-alpine3.19
#   service:
#     type: NodePort
#     port: 80
#     nodePort: 30080

# Ingress configuration for nginx ingress controller
# nginx-proxy를 대체하는 표준 Kubernetes Ingress 설정
ingress:
  enabled: false  # 기본값은 false로 설정하여 기존 환경에 영향 없음
  className: "nginx"  # nginx ingress controller 사용
  host: ""  # 빈 문자열이면 host 없이 모든 IP/도메인에서 접근 허용
  # 환경별 오버라이드 예시:
  # - 기본 환경: host: "" (모든 접근 허용)
  # - 인증서 환경: host: "custom.domain.com"
  tls:
    enabled: false  # TLS/SSL 인증서 사용 여부
    secretName: ""  # TLS Secret 이름 (tls.enabled: true일 때 필수)
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"  # 파일 업로드 무제한
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/client-header-buffer-size: "8k"
    # WebSocket 지원 (nginx ingress에서 자동 처리되지만 명시적 설정)
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      X-Forwarded-For $proxy_add_x_forwarded_for
      X-Forwarded-Proto $scheme
      X-Real-IP $remote_addr
    # 추가 최적화 설정
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "256k"

scheduler:
  image:
    registry: registry.k8s.io
    repository: kube-scheduler
    tag: v1.28.4
metricServer:
  image:
    registry: registry.k8s.io
    repository: metrics-server/metrics-server
    tag: v0.7.0
