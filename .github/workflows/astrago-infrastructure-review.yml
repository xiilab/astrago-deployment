name: "üèóÔ∏è AstraGo Infrastructure Review"

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths: 
      - "**/*.yaml"
      - "**/*.yml"
      - "**/values.yaml.gotmpl"
      - "environments/**/*"
      - "applications/**/*"

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  infrastructure-review:
    runs-on: ubuntu-latest
    name: "Infrastructure Analysis"
    
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "üêç Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: "üì¶ Install Dependencies"
        run: |
          pip install PyYAML requests
          
      - name: "üîç Get Changed Files"
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.yaml
            **/*.yml
            **/values.yaml.gotmpl
            
      - name: "üèóÔ∏è Run AstraGo Infrastructure Analysis"
        id: analysis
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          python .github/scripts/infrastructure-analyzer.py
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          
      - name: "üí¨ Post Review Comment"
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the analysis result
            let analysisResult = '';
            try {
              analysisResult = fs.readFileSync('/tmp/infrastructure-analysis.md', 'utf8');
            } catch (error) {
              analysisResult = '‚ö†Ô∏è Analysis failed: ' + error.message;
            }
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(
              comment => comment.user.login === 'github-actions[bot]' && 
                        comment.body.includes('üèóÔ∏è AstraGo Infrastructure Review')
            );
            
            // Create or update comment
            const commentBody = analysisResult;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }