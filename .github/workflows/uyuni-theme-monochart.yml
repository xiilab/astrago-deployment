name: Uyuni Theme Monochart Generation

on:
  # uyuni-login-theme 레포지토리 변경 감지 (webhook 또는 수동 트리거)
  repository_dispatch:
    types: [uyuni-theme-updated]
  
  # 주기적으로 최신 릴리즈 체크 (매일 오전 9시)
  schedule:
    - cron: '0 9 * * *'
  
  # 수동 트리거 (개발/테스트용)
  workflow_dispatch:
    inputs:
      theme_version:
        description: 'Uyuni Theme Version (e.g., v1.0.6.3)'
        required: true
        default: 'latest'
        type: string
      update_mode:
        description: 'Update mode for monochart files'
        required: true
        default: 'theme-only'
        type: choice
        options:
        - theme-only
        - full-regenerate

env:
  UYUNI_REPO: "xiilab/uyuni-login-theme"
  THEME_VERSION: ${{ github.event.inputs.theme_version || github.event.client_payload.version || 'latest' }}
  REGISTRY: "docker.io"
  IMAGE_NAME: "xiilab/astrago-keycloak"

jobs:
  build-and-push-keycloak-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout uyuni-login-theme repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.UYUNI_REPO }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: uyuni-theme
        ref: feature/keycloak-astrago-theme

    - name: Extract theme version
      id: extract-version
      run: |
        cd uyuni-theme
        THEME_VERSION="${{ env.THEME_VERSION }}"
        
        if [ "$THEME_VERSION" = "latest" ]; then
          # Get latest release version
          LATEST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${LATEST_RELEASE#v}  # Remove 'v' prefix if exists
        else
          VERSION=${THEME_VERSION#v}  # Remove 'v' prefix if exists
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected theme version: $VERSION"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.extract-version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Keycloak Docker image with theme
      uses: docker/build-push-action@v5
      with:
        context: ./uyuni-theme
        file: ./uyuni-theme/Dockerfile.keycloak
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          THEME_VERSION=${{ steps.extract-version.outputs.version }}

    - name: Output image info
      run: |
        echo "✅ Successfully built and pushed Docker image:"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-version.outputs.version }}"
        echo "📦 Theme version: ${{ steps.extract-version.outputs.version }}"

  generate-monochart:
    needs: [build-and-push-keycloak-image]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout astrago-deployment
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Checkout uyuni-login-theme for version info
      uses: actions/checkout@v4
      with:
        repository: ${{ env.UYUNI_REPO }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: uyuni-theme
        ref: feature/keycloak-astrago-theme

    - name: Extract theme version
      id: extract-version
      run: |
        cd uyuni-theme
        THEME_VERSION="${{ env.THEME_VERSION }}"
        
        if [ "$THEME_VERSION" = "latest" ]; then
          # Get latest release version
          LATEST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${LATEST_RELEASE#v}  # Remove 'v' prefix if exists
        else
          VERSION=${THEME_VERSION#v}  # Remove 'v' prefix if exists
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected theme version: $VERSION"

    - name: Check if version already exists
      id: check-version
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        # Check if this version tag already exists
        if git tag -l | grep -q "keycloak-theme-$VERSION"; then
          echo "Version $VERSION already exists, skipping update"
          exit 0
        else
          echo "New version $VERSION detected, will update"
        fi

    - name: Set up Helmfile
      run: |
        wget https://github.com/helmfile/helmfile/releases/download/v0.159.0/helmfile_0.159.0_linux_amd64.tar.gz -P /tmp/
        tar -zxvf /tmp/helmfile_0.159.0_linux_amd64.tar.gz -C /tmp/
        chmod +x /tmp/helmfile
        mv /tmp/helmfile /usr/local/bin

    - name: Set up yq
      run: |
        wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq

    - name: Update Keycloak values for all environments
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        # Update all environment values files
        for ENV in dev dev2 stage prod; do
          if [ -f "environments/$ENV/values.yaml" ]; then
            echo "Updating $ENV environment..."
            
            # Update theme version
            yq eval ".keycloak.themeVersion = \"$VERSION\"" -i environments/$ENV/values.yaml
            
            # Update Docker image to use our custom image (no more wget needed)
            yq eval ".keycloak.image.repository = \"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\"" -i environments/$ENV/values.yaml
            yq eval ".keycloak.image.tag = \"$VERSION\"" -i environments/$ENV/values.yaml
            yq eval ".keycloak.image.pullPolicy = \"Always\"" -i environments/$ENV/values.yaml
            
            echo "Updated $ENV environment with theme version: $VERSION"
            echo "Using Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
          fi
        done

    - name: Update theme-related parts in monochart files
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
        UPDATE_MODE="${{ github.event.inputs.update_mode || 'theme-only' }}"
        
        if [ "$UPDATE_MODE" = "theme-only" ]; then
          echo "🎨 Updating only theme-related parts in existing monochart files..."
          
          # Update only theme-related parts in existing monochart files
          for ENV in dev dev2 stage prod; do
            if [ -f "monochart/$ENV/keycloak/keycloak.yaml" ]; then
              echo "Updating theme-related parts in $ENV monochart file..."
              
              # 1. Update Docker image (main theme change)
              yq eval "select(.kind == \"Deployment\").spec.template.spec.containers[0].image = \"$NEW_IMAGE\"" -i monochart/$ENV/keycloak/keycloak.yaml
              
              # 2. Remove any existing theme-related initContainers (if they exist)
              # This removes the old wget-based theme download
              yq eval 'del(select(.kind == "Deployment").spec.template.spec.initContainers[] | select(.name == "download-astra-logintheme"))' -i monochart/$ENV/keycloak/keycloak.yaml
              
              # 3. Remove theme-related volumes (if they exist)
              # This removes the old theme volume mounts
              yq eval 'del(select(.kind == "Deployment").spec.template.spec.volumes[] | select(.name == "theme"))' -i monochart/$ENV/keycloak/keycloak.yaml
              yq eval 'del(select(.kind == "Deployment").spec.template.spec.containers[0].volumeMounts[] | select(.name == "theme"))' -i monochart/$ENV/keycloak/keycloak.yaml
              
              echo "✅ Updated $ENV monochart with theme changes:"
              echo "   - Docker image: $NEW_IMAGE"
              echo "   - Removed old wget initContainer (if existed)"
              echo "   - Removed old theme volumes (if existed)"
            else
              echo "Warning: monochart/$ENV/keycloak/keycloak.yaml not found, skipping..."
            fi
          done
        else
          echo "🔄 Regenerating full monochart files..."
          
          # Generate monochart files for all environments
          for ENV in dev dev2 stage prod; do
            if [ -d "environments/$ENV" ]; then
              echo "Generating monochart for $ENV environment..."
              
              # Create directory if it doesn't exist
              mkdir -p monochart/$ENV/keycloak
              
              # Generate monochart files
              helmfile -e $ENV -l app=keycloak template > monochart/$ENV/keycloak/keycloak.yaml
              
              echo "Generated monochart for $ENV environment"
            fi
          done
        fi

    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "feat: Update Keycloak monochart with uyuni theme v${{ steps.extract-version.outputs.version }}"
        file_pattern: |
          environments/*/values.yaml
          monochart/*/keycloak/keycloak.yaml

    - name: Create release tag
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        git tag -a "keycloak-theme-$VERSION" -m "Keycloak theme update to version $VERSION"
        git push origin "keycloak-theme-$VERSION"

    - name: Output summary
      run: |
        echo "✅ Monochart generation completed successfully!"
        echo "🎨 Theme version: ${{ steps.extract-version.outputs.version }}"
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-version.outputs.version }}"
        echo "📁 Generated monochart files for all environments"
        echo "🔄 No more wget downloads - using Docker image directly!" 