[WARNING]: While constructing a mapping from
/Users/xiilab/Develop/astrago/astrago-
deployment/kubespray/versions/v2.25.0/kubespray/roles/bootstrap-
os/tasks/main.yml, line 29, column 7, found a duplicate dict key (paths). Using
last defined value only.
[WARNING]: Skipping callback plugin 'ara_default', unable to load

PLAY [Check Ansible version] ***************************************************
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.003)       0:00:00.003 **************** 

TASK [Check 2.16.4 <= Ansible version < 2.17.0] ********************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.010)       0:00:00.014 **************** 

TASK [Check that python netaddr is installed] **********************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.030)       0:00:00.044 **************** 
[WARNING]: Could not match supplied host pattern, ignoring: kube-master
[WARNING]: Could not match supplied host pattern, ignoring: kube-node
[WARNING]: Could not match supplied host pattern, ignoring: k8s-cluster
[WARNING]: Could not match supplied host pattern, ignoring: calico-rr
[WARNING]: Could not match supplied host pattern, ignoring: no-floating
[WARNING]: Could not match supplied host pattern, ignoring: bastion

TASK [Check that jinja is not too old (install via pip)] ***********************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

PLAY [Add kube-master nodes to kube_control_plane] *****************************
skipping: no hosts matched

PLAY [Add kube-node nodes to kube_node] ****************************************
skipping: no hosts matched

PLAY [Add k8s-cluster nodes to k8s_cluster] ************************************
skipping: no hosts matched

PLAY [Add calico-rr nodes to calico_rr] ****************************************
skipping: no hosts matched

PLAY [Add no-floating nodes to no_floating] ************************************
skipping: no hosts matched

PLAY [Install bastion ssh config] **********************************************
skipping: no hosts matched

PLAY [Bootstrap hosts for Ansible] *********************************************
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.012)       0:00:00.057 **************** 
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.019)       0:00:00.076 **************** 
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.012)       0:00:00.088 **************** 
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.022)       0:00:00.110 **************** 
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.013)       0:00:00.124 **************** 
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.020)       0:00:00.144 **************** 
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.020)       0:00:00.165 **************** 
[WARNING]: raw module does not support the environment keyword

TASK [bootstrap-os : Fetch /etc/os-release] ************************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:29:43 +0900 (0:00:00.103)       0:00:00.269 **************** 
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.108)       0:00:00.377 **************** 

TASK [bootstrap-os : Include tasks] ********************************************
included: /Users/xiilab/Develop/astrago/astrago-deployment/kubespray/versions/v2.25.0/kubespray/roles/bootstrap-os/tasks/ubuntu.yml for node1, node2, node3 => (item=/Users/xiilab/Develop/astrago/astrago-deployment/kubespray/versions/v2.25.0/kubespray/roles/bootstrap-os/tasks/ubuntu.yml)
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.041)       0:00:00.419 **************** 

TASK [bootstrap-os : Check if bootstrap is needed] *****************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.058)       0:00:00.477 **************** 

TASK [bootstrap-os : Check http::proxy in apt configuration files] *************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.081)       0:00:00.559 **************** 
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.021)       0:00:00.580 **************** 

TASK [bootstrap-os : Check https::proxy in apt configuration files] ************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.081)       0:00:00.662 **************** 
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.020)       0:00:00.683 **************** 
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.017)       0:00:00.700 **************** 
수요일 10 9월 2025  08:29:44 +0900 (0:00:00.032)       0:00:00.732 **************** 

TASK [bootstrap-os : Create remote_tmp for it is used by another module] *******
ok: [node3]
ok: [node1]
ok: [node2]
수요일 10 9월 2025  08:29:45 +0900 (0:00:00.667)       0:00:01.399 **************** 

TASK [bootstrap-os : Gather facts] *********************************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:29:47 +0900 (0:00:02.404)       0:00:03.804 **************** 

TASK [bootstrap-os : Assign inventory name to unconfigured hostnames (non-CoreOS, non-Flatcar, Suse and ClearLinux, non-Fedora)] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:29:51 +0900 (0:00:03.981)       0:00:07.785 **************** 
수요일 10 9월 2025  08:29:51 +0900 (0:00:00.033)       0:00:07.818 **************** 

TASK [bootstrap-os : Ensure bash_completion.d folder exists] *******************
ok: [node1]
ok: [node3]
ok: [node2]

PLAY [Gather facts] ************************************************************
수요일 10 9월 2025  08:29:52 +0900 (0:00:00.535)       0:00:08.354 **************** 

TASK [Gather minimal facts] ****************************************************
ok: [node1]
ok: [node3]
ok: [node2]
수요일 10 9월 2025  08:29:53 +0900 (0:00:01.843)       0:00:10.197 **************** 

TASK [Gather necessary facts (network)] ****************************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:29:57 +0900 (0:00:03.595)       0:00:13.793 **************** 

TASK [Gather necessary facts (hardware)] ***************************************
ok: [node1]
ok: [node2]
ok: [node3]

PLAY [Prepare for etcd install] ************************************************
수요일 10 9월 2025  08:30:00 +0900 (0:00:02.708)       0:00:16.501 **************** 
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.031)       0:00:16.532 **************** 

TASK [kubespray-defaults : Create fallback_ips_base] ***************************
ok: [node1 -> localhost]
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.022)       0:00:16.555 **************** 

TASK [kubespray-defaults : Set fallback_ips] ***********************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.030)       0:00:16.586 **************** 
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.016)       0:00:16.603 **************** 
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.025)       0:00:16.628 **************** 
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.023)       0:00:16.651 **************** 

TASK [adduser : User | Create User Group] **************************************
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:00 +0900 (0:00:00.406)       0:00:17.058 **************** 

TASK [adduser : User | Create User] ********************************************
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:01 +0900 (0:00:00.524)       0:00:17.582 **************** 

TASK [kubernetes/preinstall : Check if /etc/fstab exists] **********************
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:01 +0900 (0:00:00.424)       0:00:18.007 **************** 

TASK [kubernetes/preinstall : Remove swapfile from /etc/fstab] *****************
ok: [node1] => (item=swap)
ok: [node3] => (item=swap)
ok: [node2] => (item=swap)
ok: [node1] => (item=none)
ok: [node3] => (item=none)
ok: [node2] => (item=none)
수요일 10 9월 2025  08:30:02 +0900 (0:00:00.816)       0:00:18.823 **************** 

TASK [kubernetes/preinstall : Mask swap.target (persist swapoff)] **************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:03 +0900 (0:00:00.790)       0:00:19.614 **************** 

TASK [kubernetes/preinstall : Disable swap] ************************************
changed: [node3]
changed: [node2]
changed: [node1]
수요일 10 9월 2025  08:30:03 +0900 (0:00:00.447)       0:00:20.061 **************** 
수요일 10 9월 2025  08:30:03 +0900 (0:00:00.031)       0:00:20.092 **************** 

TASK [kubernetes/preinstall : Check resolvconf] ********************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:04 +0900 (0:00:00.320)       0:00:20.413 **************** 

TASK [kubernetes/preinstall : Check existence of /etc/resolvconf/resolv.conf.d] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:04 +0900 (0:00:00.328)       0:00:20.741 **************** 

TASK [kubernetes/preinstall : Check status of /etc/resolv.conf] ****************
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:04 +0900 (0:00:00.329)       0:00:21.071 **************** 

TASK [kubernetes/preinstall : Get content of /etc/resolv.conf] *****************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:05 +0900 (0:00:00.426)       0:00:21.498 **************** 

TASK [kubernetes/preinstall : Get currently configured nameservers] ************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:05 +0900 (0:00:00.069)       0:00:21.568 **************** 

TASK [kubernetes/preinstall : Stop if /etc/resolv.conf not configured nameservers] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:05 +0900 (0:00:00.035)       0:00:21.603 **************** 

TASK [kubernetes/preinstall : NetworkManager | Check if host has NetworkManager] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:05 +0900 (0:00:00.332)       0:00:21.935 **************** 

TASK [kubernetes/preinstall : Check systemd-resolved] **************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.361)       0:00:22.297 **************** 

TASK [kubernetes/preinstall : Set default dns if remove_default_searchdomains is false] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.055)       0:00:22.353 **************** 

TASK [kubernetes/preinstall : Set dns facts] ***********************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.032)       0:00:22.385 **************** 

TASK [kubernetes/preinstall : Check if kubelet is configured] ******************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.308)       0:00:22.694 **************** 

TASK [kubernetes/preinstall : Check if early DNS configuration stage] **********
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.041)       0:00:22.735 **************** 

TASK [kubernetes/preinstall : Target resolv.conf files] ************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.032)       0:00:22.768 **************** 
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.018)       0:00:22.787 **************** 

TASK [kubernetes/preinstall : Check if /etc/dhclient.conf exists] **************
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.314)       0:00:23.102 **************** 
수요일 10 9월 2025  08:30:06 +0900 (0:00:00.023)       0:00:23.125 **************** 

TASK [kubernetes/preinstall : Check if /etc/dhcp/dhclient.conf exists] *********
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.338)       0:00:23.464 **************** 

TASK [kubernetes/preinstall : Target dhclient conf file for /etc/dhcp/dhclient.conf] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.048)       0:00:23.512 **************** 
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.020)       0:00:23.532 **************** 

TASK [kubernetes/preinstall : Target dhclient hook file for Debian family] *****
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.030)       0:00:23.563 **************** 

TASK [kubernetes/preinstall : Generate search domains to resolvconf] ***********
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.029)       0:00:23.592 **************** 

TASK [kubernetes/preinstall : Pick coredns cluster IP or default resolver] *****
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.047)       0:00:23.640 **************** 

TASK [kubernetes/preinstall : Generate nameservers for resolvconf, including cluster DNS] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.035)       0:00:23.675 **************** 
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.019)       0:00:23.694 **************** 
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.018)       0:00:23.712 **************** 

TASK [kubernetes/preinstall : Check /usr readonly] *****************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.308)       0:00:24.021 **************** 
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.036)       0:00:24.058 **************** 

TASK [kubernetes/preinstall : Stop if either kube_control_plane or kube_node group is empty] ***
ok: [node1] => (item=kube_control_plane) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": "kube_control_plane",
    "msg": "All assertions passed"
}
ok: [node1] => (item=kube_node) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": "kube_node",
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.029)       0:00:24.087 **************** 

TASK [kubernetes/preinstall : Stop if etcd group is empty in external etcd mode] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.021)       0:00:24.108 **************** 

TASK [kubernetes/preinstall : Stop if non systemd OS type] *********************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.032)       0:00:24.140 **************** 

TASK [kubernetes/preinstall : Stop if the os does not support] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.032)       0:00:24.173 **************** 

TASK [kubernetes/preinstall : Stop if unknown network plugin] ******************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.036)       0:00:24.209 **************** 

TASK [kubernetes/preinstall : Stop if unsupported version of Kubernetes] *******
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:07 +0900 (0:00:00.033)       0:00:24.243 **************** 

TASK [kubernetes/preinstall : Stop if known booleans are set as strings (Use JSON format on CLI: -e "{'key': true }")] ***
ok: [node1] => (item={'name': 'download_run_once', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "download_run_once",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'deploy_netchecker', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "deploy_netchecker",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'download_always_pull', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "download_always_pull",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'helm_enabled', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "helm_enabled",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'openstack_lbaas_enabled', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "openstack_lbaas_enabled",
        "value": false
    },
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.073)       0:00:24.317 **************** 

TASK [kubernetes/preinstall : Stop if even number of etcd hosts] ***************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.034)       0:00:24.351 **************** 

TASK [kubernetes/preinstall : Stop if memory is too small for masters] *********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.031)       0:00:24.383 **************** 

TASK [kubernetes/preinstall : Stop if memory is too small for nodes] ***********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.030)       0:00:24.414 **************** 

TASK [kubernetes/preinstall : Stop if cgroups are not enabled on nodes] ********
ok: [node1]
ok: [node3]
ok: [node2]
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.325)       0:00:24.739 **************** 
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.041)       0:00:24.781 **************** 

TASK [kubernetes/preinstall : Stop if ip var does not match local ips] *********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:08 +0900 (0:00:00.034)       0:00:24.815 **************** 

TASK [kubernetes/preinstall : Ensure ping package] *****************************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:10 +0900 (0:00:01.930)       0:00:26.746 **************** 

TASK [kubernetes/preinstall : Stop if access_ip is not pingable] ***************
ok: [node1]
ok: [node3]
ok: [node2]
수요일 10 9월 2025  08:30:10 +0900 (0:00:00.356)       0:00:27.102 **************** 
수요일 10 9월 2025  08:30:10 +0900 (0:00:00.036)       0:00:27.139 **************** 
수요일 10 9월 2025  08:30:10 +0900 (0:00:00.028)       0:00:27.168 **************** 
수요일 10 9월 2025  08:30:10 +0900 (0:00:00.028)       0:00:27.196 **************** 

TASK [kubernetes/preinstall : Stop if bad hostname] ****************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:10 +0900 (0:00:00.037)       0:00:27.233 **************** 
수요일 10 9월 2025  08:30:10 +0900 (0:00:00.026)       0:00:27.260 **************** 

TASK [kubernetes/preinstall : Check that kube_service_addresses is a network range] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.042)       0:00:27.302 **************** 

TASK [kubernetes/preinstall : Check that kube_pods_subnet is a network range] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.036)       0:00:27.339 **************** 

TASK [kubernetes/preinstall : Check that kube_pods_subnet does not collide with kube_service_addresses] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.038)       0:00:27.377 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.008)       0:00:27.386 **************** 

TASK [kubernetes/preinstall : Stop if unknown dns mode] ************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.018)       0:00:27.404 **************** 

TASK [kubernetes/preinstall : Stop if unknown kube proxy mode] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.019)       0:00:27.424 **************** 

TASK [kubernetes/preinstall : Stop if unknown cert_management] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.019)       0:00:27.444 **************** 

TASK [kubernetes/preinstall : Stop if unknown resolvconf_mode] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.018)       0:00:27.463 **************** 

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host, docker or kubeadm] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.030)       0:00:27.493 **************** 

TASK [kubernetes/preinstall : Stop if container manager is not docker, crio or containerd] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.018)       0:00:27.512 **************** 

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host or kubeadm when container_manager != docker] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.032)       0:00:27.545 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.013)       0:00:27.558 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.014)       0:00:27.572 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.023)       0:00:27.595 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.022)       0:00:27.617 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.024)       0:00:27.642 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.025)       0:00:27.668 **************** 

TASK [kubernetes/preinstall : Ensure minimum containerd version] ***************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.020)       0:00:27.688 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.021)       0:00:27.710 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.019)       0:00:27.730 **************** 
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.024)       0:00:27.754 **************** 

TASK [kubernetes/preinstall : Verify that the packages list structure is valid] ***
ok: [node3]
ok: [node1]
ok: [node2]
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.192)       0:00:27.947 **************** 

TASK [kubernetes/preinstall : Verify that the packages list is sorted] *********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node2] => {
    "changed": false,
    "msg": "All assertions passed"
}
ok: [node3] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:30:11 +0900 (0:00:00.051)       0:00:27.998 **************** 

TASK [kubernetes/preinstall : Create kubernetes directories] *******************
ok: [node1] => (item=/etc/kubernetes)
ok: [node3] => (item=/etc/kubernetes)
ok: [node2] => (item=/etc/kubernetes)
ok: [node1] => (item=/etc/kubernetes/manifests)
ok: [node3] => (item=/etc/kubernetes/manifests)
ok: [node2] => (item=/etc/kubernetes/manifests)
ok: [node3] => (item=/usr/local/bin/kubernetes-scripts)
ok: [node1] => (item=/usr/local/bin/kubernetes-scripts)
ok: [node2] => (item=/usr/local/bin/kubernetes-scripts)
ok: [node3] => (item=/usr/libexec/kubernetes/kubelet-plugins/volume/exec)
ok: [node2] => (item=/usr/libexec/kubernetes/kubelet-plugins/volume/exec)
ok: [node1] => (item=/usr/libexec/kubernetes/kubelet-plugins/volume/exec)
수요일 10 9월 2025  08:30:12 +0900 (0:00:01.260)       0:00:29.258 **************** 

TASK [kubernetes/preinstall : Create other directories of root owner] **********
ok: [node1] => (item=/etc/kubernetes/ssl)
ok: [node2] => (item=/etc/kubernetes/ssl)
ok: [node3] => (item=/etc/kubernetes/ssl)
ok: [node1] => (item=/usr/local/bin)
ok: [node2] => (item=/usr/local/bin)
ok: [node3] => (item=/usr/local/bin)
수요일 10 9월 2025  08:30:13 +0900 (0:00:00.666)       0:00:29.925 **************** 

TASK [kubernetes/preinstall : Check if kubernetes kubeadm compat cert dir exists] ***
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:13 +0900 (0:00:00.344)       0:00:30.270 **************** 
수요일 10 9월 2025  08:30:14 +0900 (0:00:00.036)       0:00:30.306 **************** 

TASK [kubernetes/preinstall : Create cni directories] **************************
ok: [node1] => (item=/etc/cni/net.d)
ok: [node3] => (item=/etc/cni/net.d)
ok: [node2] => (item=/etc/cni/net.d)
ok: [node1] => (item=/opt/cni/bin)
ok: [node2] => (item=/opt/cni/bin)
ok: [node3] => (item=/opt/cni/bin)
수요일 10 9월 2025  08:30:14 +0900 (0:00:00.667)       0:00:30.973 **************** 

TASK [kubernetes/preinstall : Create calico cni directories] *******************
ok: [node2] => (item=/var/lib/calico)
ok: [node1] => (item=/var/lib/calico)
ok: [node3] => (item=/var/lib/calico)
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.347)       0:00:31.321 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.043)       0:00:31.364 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.021)       0:00:31.386 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.020)       0:00:31.406 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.030)       0:00:31.437 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.030)       0:00:31.467 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.020)       0:00:31.487 **************** 
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.019)       0:00:31.506 **************** 

TASK [kubernetes/preinstall : Create systemd-resolved drop-in directory] *******
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:15 +0900 (0:00:00.354)       0:00:31.861 **************** 

TASK [kubernetes/preinstall : Write Kubespray DNS settings to systemd-resolved] ***
changed: [node2]
changed: [node3]
changed: [node1]
수요일 10 9월 2025  08:30:16 +0900 (0:00:01.015)       0:00:32.876 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.027)       0:00:32.904 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.022)       0:00:32.927 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.019)       0:00:32.946 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.020)       0:00:32.966 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.020)       0:00:32.986 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.020)       0:00:33.007 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.019)       0:00:33.027 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.019)       0:00:33.046 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.018)       0:00:33.065 **************** 
수요일 10 9월 2025  08:30:16 +0900 (0:00:00.019)       0:00:33.085 **************** 

TASK [kubernetes/preinstall : Update package management cache (APT)] ***********
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:18 +0900 (0:00:01.210)       0:00:34.295 **************** 
수요일 10 9월 2025  08:30:18 +0900 (0:00:00.041)       0:00:34.337 **************** 
수요일 10 9월 2025  08:30:18 +0900 (0:00:00.024)       0:00:34.361 **************** 

TASK [kubernetes/preinstall : Install packages requirements] *******************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:20 +0900 (0:00:01.926)       0:00:36.287 **************** 
수요일 10 9월 2025  08:30:20 +0900 (0:00:00.037)       0:00:36.325 **************** 
수요일 10 9월 2025  08:30:20 +0900 (0:00:00.022)       0:00:36.347 **************** 
수요일 10 9월 2025  08:30:20 +0900 (0:00:00.021)       0:00:36.368 **************** 

TASK [kubernetes/preinstall : Clean previously used sysctl file locations] *****
ok: [node2] => (item=ipv4-ip_forward.conf)
ok: [node3] => (item=ipv4-ip_forward.conf)
ok: [node1] => (item=ipv4-ip_forward.conf)
ok: [node2] => (item=bridge-nf-call.conf)
ok: [node3] => (item=bridge-nf-call.conf)
ok: [node1] => (item=bridge-nf-call.conf)
수요일 10 9월 2025  08:30:20 +0900 (0:00:00.633)       0:00:37.002 **************** 

TASK [kubernetes/preinstall : Stat sysctl file configuration] ******************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:21 +0900 (0:00:00.326)       0:00:37.328 **************** 

TASK [kubernetes/preinstall : Change sysctl file path to link source if linked] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:21 +0900 (0:00:00.049)       0:00:37.378 **************** 

TASK [kubernetes/preinstall : Make sure sysctl file path folder exists] ********
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:21 +0900 (0:00:00.324)       0:00:37.702 **************** 

TASK [kubernetes/preinstall : Enable ip forwarding] ****************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:21 +0900 (0:00:00.434)       0:00:38.137 **************** 
수요일 10 9월 2025  08:30:21 +0900 (0:00:00.039)       0:00:38.176 **************** 

TASK [kubernetes/preinstall : Check if we need to set fs.may_detach_mounts] ****
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:22 +0900 (0:00:00.329)       0:00:38.506 **************** 
수요일 10 9월 2025  08:30:22 +0900 (0:00:00.043)       0:00:38.550 **************** 

TASK [kubernetes/preinstall : Ensure kubelet expected parameters are set] ******
ok: [node2] => (item={'name': 'kernel.keys.root_maxbytes', 'value': 25000000})
ok: [node3] => (item={'name': 'kernel.keys.root_maxbytes', 'value': 25000000})
ok: [node1] => (item={'name': 'kernel.keys.root_maxbytes', 'value': 25000000})
ok: [node1] => (item={'name': 'kernel.keys.root_maxkeys', 'value': 1000000})
ok: [node2] => (item={'name': 'kernel.keys.root_maxkeys', 'value': 1000000})
ok: [node3] => (item={'name': 'kernel.keys.root_maxkeys', 'value': 1000000})
ok: [node2] => (item={'name': 'kernel.panic', 'value': 10})
ok: [node3] => (item={'name': 'kernel.panic', 'value': 10})
ok: [node1] => (item={'name': 'kernel.panic', 'value': 10})
ok: [node3] => (item={'name': 'kernel.panic_on_oops', 'value': 1})
ok: [node2] => (item={'name': 'kernel.panic_on_oops', 'value': 1})
ok: [node1] => (item={'name': 'kernel.panic_on_oops', 'value': 1})
ok: [node3] => (item={'name': 'vm.overcommit_memory', 'value': 1})
ok: [node2] => (item={'name': 'vm.overcommit_memory', 'value': 1})
ok: [node1] => (item={'name': 'vm.overcommit_memory', 'value': 1})
ok: [node2] => (item={'name': 'vm.panic_on_oom', 'value': 0})
ok: [node3] => (item={'name': 'vm.panic_on_oom', 'value': 0})
ok: [node1] => (item={'name': 'vm.panic_on_oom', 'value': 0})
수요일 10 9월 2025  08:30:24 +0900 (0:00:01.856)       0:00:40.407 **************** 

TASK [kubernetes/preinstall : Check dummy module] ******************************
ok: [node1]
ok: [node3]
ok: [node2]
수요일 10 9월 2025  08:30:24 +0900 (0:00:00.410)       0:00:40.817 **************** 
수요일 10 9월 2025  08:30:24 +0900 (0:00:00.036)       0:00:40.854 **************** 

TASK [kubernetes/preinstall : Disable fapolicyd service] ***********************
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.667)       0:00:41.522 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.038)       0:00:41.560 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.022)       0:00:41.582 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.020)       0:00:41.603 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.020)       0:00:41.623 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.019)       0:00:41.643 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.018)       0:00:41.662 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.018)       0:00:41.681 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.018)       0:00:41.699 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.018)       0:00:41.718 **************** 

TASK [kubernetes/preinstall : Hosts | create hosts list from inventory] ********
ok: [node1 -> localhost]
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.028)       0:00:41.746 **************** 

TASK [kubernetes/preinstall : Hosts | populate inventory into hosts file] ******
changed: [node3]
changed: [node1]
changed: [node2]
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.414)       0:00:42.161 **************** 
수요일 10 9월 2025  08:30:25 +0900 (0:00:00.033)       0:00:42.194 **************** 

TASK [kubernetes/preinstall : Hosts | Retrieve hosts file content] *************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:26 +0900 (0:00:00.311)       0:00:42.506 **************** 

TASK [kubernetes/preinstall : Hosts | Extract existing entries for localhost from hosts file] ***
ok: [node1] => (item=127.0.0.1 localhost)
ok: [node2] => (item=127.0.0.1 localhost)
ok: [node3] => (item=127.0.0.1 localhost)
ok: [node1] => (item=::1     ip6-localhost ip6-loopback)
ok: [node2] => (item=::1     ip6-localhost ip6-loopback)
ok: [node3] => (item=::1     ip6-localhost ip6-loopback)
ok: [node1] => (item=127.0.0.1 ubuntu2204.localdomain)
ok: [node2] => (item=127.0.0.1 ubuntu2204.localdomain)
ok: [node3] => (item=127.0.0.1 ubuntu2204.localdomain)
수요일 10 9월 2025  08:30:26 +0900 (0:00:00.091)       0:00:42.598 **************** 

TASK [kubernetes/preinstall : Hosts | Update target hosts file entries dict with required entries] ***
ok: [node1] => (item={'key': '127.0.0.1', 'value': {'expected': ['localhost', 'localhost.localdomain']}})
ok: [node2] => (item={'key': '127.0.0.1', 'value': {'expected': ['localhost', 'localhost.localdomain']}})
ok: [node1] => (item={'key': '::1', 'value': {'expected': ['localhost6', 'localhost6.localdomain'], 'unexpected': ['localhost', 'localhost.localdomain']}})
ok: [node2] => (item={'key': '::1', 'value': {'expected': ['localhost6', 'localhost6.localdomain'], 'unexpected': ['localhost', 'localhost.localdomain']}})
ok: [node3] => (item={'key': '127.0.0.1', 'value': {'expected': ['localhost', 'localhost.localdomain']}})
ok: [node3] => (item={'key': '::1', 'value': {'expected': ['localhost6', 'localhost6.localdomain'], 'unexpected': ['localhost', 'localhost.localdomain']}})
수요일 10 9월 2025  08:30:26 +0900 (0:00:00.035)       0:00:42.633 **************** 

TASK [kubernetes/preinstall : Hosts | Update (if necessary) hosts file] ********
changed: [node3] => (item={'key': '127.0.0.1', 'value': ['ubuntu2204.localdomain', 'localhost', 'localhost.localdomain']})
changed: [node2] => (item={'key': '127.0.0.1', 'value': ['ubuntu2204.localdomain', 'localhost', 'localhost.localdomain']})
changed: [node1] => (item={'key': '127.0.0.1', 'value': ['ubuntu2204.localdomain', 'localhost', 'localhost.localdomain']})
changed: [node2] => (item={'key': '::1', 'value': ['ip6-localhost', 'ip6-loopback', 'localhost6', 'localhost6.localdomain']})
changed: [node1] => (item={'key': '::1', 'value': ['ip6-localhost', 'ip6-loopback', 'localhost6', 'localhost6.localdomain']})
changed: [node3] => (item={'key': '::1', 'value': ['ip6-localhost', 'ip6-loopback', 'localhost6', 'localhost6.localdomain']})
수요일 10 9월 2025  08:30:27 +0900 (0:00:00.763)       0:00:43.397 **************** 

TASK [kubernetes/preinstall : Update facts] ************************************
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:27 +0900 (0:00:00.820)       0:00:44.218 **************** 

TASK [kubernetes/preinstall : Configure dhclient to supersede search/domain/nameservers] ***
changed: [node1]
changed: [node2]
changed: [node3]
수요일 10 9월 2025  08:30:28 +0900 (0:00:00.351)       0:00:44.570 **************** 

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (non-RH)] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.763)       0:00:45.333 **************** 
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.034)       0:00:45.368 **************** 
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.022)       0:00:45.391 **************** 
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.021)       0:00:45.412 **************** 
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.001)       0:00:45.414 **************** 
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.001)       0:00:45.415 **************** 
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.001)       0:00:45.416 **************** 

RUNNING HANDLER [kubernetes/preinstall : Preinstall | reload kubelet] **********
changed: [node1]
changed: [node2]
changed: [node3]
수요일 10 9월 2025  08:30:29 +0900 (0:00:00.703)       0:00:46.119 **************** 

RUNNING HANDLER [kubernetes/preinstall : Preinstall | kube-apiserver configured] ***
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:30 +0900 (0:00:00.341)       0:00:46.460 **************** 

RUNNING HANDLER [kubernetes/preinstall : Preinstall | kube-controller configured] ***
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:30:30 +0900 (0:00:00.337)       0:00:46.798 **************** 
수요일 10 9월 2025  08:30:30 +0900 (0:00:00.035)       0:00:46.833 **************** 

RUNNING HANDLER [kubernetes/preinstall : Preinstall | restart kube-controller-manager crio/containerd] ***
changed: [node1]
수요일 10 9월 2025  08:30:31 +0900 (0:00:00.677)       0:00:47.511 **************** 
수요일 10 9월 2025  08:30:31 +0900 (0:00:00.036)       0:00:47.548 **************** 

RUNNING HANDLER [kubernetes/preinstall : Preinstall | restart kube-apiserver crio/containerd] ***
changed: [node1]
수요일 10 9월 2025  08:31:01 +0900 (0:00:30.123)       0:01:17.672 **************** 
수요일 10 9월 2025  08:31:01 +0900 (0:00:00.036)       0:01:17.708 **************** 

RUNNING HANDLER [kubernetes/preinstall : Preinstall | Restart systemd-resolved] ***
changed: [node1]
changed: [node2]
changed: [node3]
수요일 10 9월 2025  08:31:02 +0900 (0:00:01.339)       0:01:19.047 **************** 

TASK [kubernetes/preinstall : Check if we are running inside a Azure VM] *******
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.383)       0:01:19.431 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.036)       0:01:19.467 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.023)       0:01:19.491 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.021)       0:01:19.513 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.020)       0:01:19.534 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.020)       0:01:19.554 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.020)       0:01:19.574 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.018)       0:01:19.593 **************** 

TASK [Run calico checks] *******************************************************
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.100)       0:01:19.694 **************** 

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (ipip)] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.019)       0:01:19.713 **************** 

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (ipip_mode)] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.018)       0:01:19.732 **************** 

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (calcio_ipam_autoallocateblocks)] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.019)       0:01:19.751 **************** 
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.012)       0:01:19.764 **************** 

TASK [network_plugin/calico : Stop if supported Calico versions] ***************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.019)       0:01:19.783 **************** 

TASK [network_plugin/calico : Check if calicoctl.sh exists] ********************
ok: [node1]
수요일 10 9월 2025  08:31:03 +0900 (0:00:00.330)       0:01:20.114 **************** 
FAILED - RETRYING: [node1]: Check if calico ready (5 retries left).
FAILED - RETRYING: [node1]: Check if calico ready (4 retries left).
FAILED - RETRYING: [node1]: Check if calico ready (3 retries left).

TASK [network_plugin/calico : Check if calico ready] ***************************
changed: [node1]
수요일 10 9월 2025  08:31:35 +0900 (0:00:31.897)       0:01:52.012 **************** 

TASK [network_plugin/calico : Get current calico version] **********************
ok: [node1]
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.432)       0:01:52.444 **************** 

TASK [network_plugin/calico : Assert that current calico version is enough for upgrade] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.043)       0:01:52.487 **************** 
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.021)       0:01:52.509 **************** 
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.011)       0:01:52.521 **************** 

TASK [network_plugin/calico : Check vars defined correctly] ********************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.020)       0:01:52.541 **************** 

TASK [network_plugin/calico : Check calico network backend defined correctly] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.019)       0:01:52.561 **************** 

TASK [network_plugin/calico : Check ipip and vxlan mode defined correctly] *****
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.020)       0:01:52.581 **************** 
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.010)       0:01:52.592 **************** 

TASK [network_plugin/calico : Check ipip and vxlan mode if simultaneously enabled] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.019)       0:01:52.611 **************** 

TASK [network_plugin/calico : Get Calico default-pool configuration] ***********
ok: [node1]
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.421)       0:01:53.032 **************** 

TASK [network_plugin/calico : Set calico_pool_conf] ****************************
ok: [node1]
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.045)       0:01:53.078 **************** 

TASK [network_plugin/calico : Check if inventory match current cluster configuration] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.026)       0:01:53.104 **************** 
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.012)       0:01:53.117 **************** 
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.012)       0:01:53.129 **************** 
수요일 10 9월 2025  08:31:36 +0900 (0:00:00.015)       0:01:53.144 **************** 

TASK [container-engine/validate-container-engine : Validate-container-engine | check if fedora coreos] ***
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:31:37 +0900 (0:00:00.332)       0:01:53.476 **************** 

TASK [container-engine/validate-container-engine : Validate-container-engine | set is_ostree] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:31:37 +0900 (0:00:00.037)       0:01:53.514 **************** 

TASK [container-engine/validate-container-engine : Ensure kubelet systemd unit exists] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:31:37 +0900 (0:00:00.380)       0:01:53.895 **************** 

TASK [container-engine/validate-container-engine : Populate service facts] *****
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:31:46 +0900 (0:00:08.997)       0:02:02.892 **************** 

TASK [container-engine/validate-container-engine : Check if containerd is installed] ***
ok: [node2]
ok: [node3]
ok: [node1]
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.441)       0:02:03.334 **************** 

TASK [container-engine/validate-container-engine : Check if docker is installed] ***
ok: [node1]
ok: [node3]
ok: [node2]
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.383)       0:02:03.718 **************** 

TASK [container-engine/validate-container-engine : Check if crio is installed] ***
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.388)       0:02:04.106 **************** 
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.038)       0:02:04.145 **************** 
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.030)       0:02:04.175 **************** 
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.025)       0:02:04.201 **************** 
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.026)       0:02:04.227 **************** 
수요일 10 9월 2025  08:31:47 +0900 (0:00:00.044)       0:02:04.271 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.023)       0:02:04.295 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:04.320 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.345 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.026)       0:02:04.371 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.395 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.031)       0:02:04.427 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.030)       0:02:04.458 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.482 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:04.508 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.532 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.064)       0:02:04.597 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:04.622 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.026)       0:02:04.648 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.673 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.038)       0:02:04.712 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.736 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.761 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:04.786 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:04.811 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.045)       0:02:04.856 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.029)       0:02:04.885 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.023)       0:02:04.909 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.026)       0:02:04.935 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.023)       0:02:04.959 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:04.985 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.030)       0:02:05.015 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:05.040 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:05.065 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:05.090 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.024)       0:02:05.114 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.030)       0:02:05.145 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:05.170 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.057)       0:02:05.228 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.026)       0:02:05.254 **************** 
수요일 10 9월 2025  08:31:48 +0900 (0:00:00.025)       0:02:05.280 **************** 
수요일 10 9월 2025  08:31:49 +0900 (0:00:00.024)       0:02:05.305 **************** 
수요일 10 9월 2025  08:31:49 +0900 (0:00:00.037)       0:02:05.343 **************** 
수요일 10 9월 2025  08:31:49 +0900 (0:00:00.031)       0:02:05.374 **************** 

TASK [Drain node] **************************************************************
수요일 10 9월 2025  08:31:49 +0900 (0:00:00.054)       0:02:05.429 **************** 

TASK [remove-node/pre-remove : Remove-node | List nodes] ***********************
ok: [node1]
수요일 10 9월 2025  08:31:49 +0900 (0:00:00.543)       0:02:05.972 **************** 

TASK [remove-node/pre-remove : Remove-node | Drain node except daemonsets resource] ***
changed: [node2 -> node1(10.61.3.123)]
changed: [node3 -> node1(10.61.3.123)]
changed: [node1]
수요일 10 9월 2025  08:32:22 +0900 (0:00:32.737)       0:02:38.710 **************** 

TASK [remove-node/pre-remove : Remove-node | Wait until Volumes will be detached from the node] ***
ok: [node1]
ok: [node2 -> node1(10.61.3.123)]
ok: [node3 -> node1(10.61.3.123)]
수요일 10 9월 2025  08:32:22 +0900 (0:00:00.524)       0:02:39.234 **************** 

TASK [container-engine/validate-container-engine : Stop kubelet] ***************
changed: [node2]
changed: [node1]
changed: [node3]
수요일 10 9월 2025  08:32:23 +0900 (0:00:00.722)       0:02:39.956 **************** 

TASK [container-engine/runc : Runc | check if fedora coreos] *******************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:32:24 +0900 (0:00:00.339)       0:02:40.296 **************** 

TASK [container-engine/runc : Runc | set is_ostree] ****************************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:32:24 +0900 (0:00:00.052)       0:02:40.348 **************** 

TASK [container-engine/runc : Runc | Uninstall runc package managed by package manager] ***
ok: [node2]
ok: [node1]
ok: [node3]
수요일 10 9월 2025  08:32:25 +0900 (0:00:01.148)       0:02:41.497 **************** 

TASK [container-engine/runc : Runc | Download runc binary] *********************
included: /Users/xiilab/Develop/astrago/astrago-deployment/kubespray/versions/v2.25.0/kubespray/roles/container-engine/runc/tasks/../../../download/tasks/download_file.yml for node1, node2, node3
수요일 10 9월 2025  08:32:25 +0900 (0:00:00.064)       0:02:41.562 **************** 

TASK [container-engine/runc : Prep_download | Set a few facts] *****************
ok: [node1]
ok: [node2]
ok: [node3]
수요일 10 9월 2025  08:32:25 +0900 (0:00:00.040)       0:02:41.603 **************** 

TASK [container-engine/runc : Download_file | Show url of file to dowload] *****
fatal: [node1]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: {{ download_defaults | combine(downloads.runc) }}: {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ download_defaults | combine(downloads.runc) }}: {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'\n\nThe error appears to be in '/Users/xiilab/Develop/astrago/astrago-deployment/kubespray/versions/v2.25.0/kubespray/roles/download/tasks/download_file.yml': line 10, column 5, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n  - name: Download_file | Show url of file to dowload\n    ^ here\n"}
fatal: [node2]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: {{ download_defaults | combine(downloads.runc) }}: {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ download_defaults | combine(downloads.runc) }}: {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'\n\nThe error appears to be in '/Users/xiilab/Develop/astrago/astrago-deployment/kubespray/versions/v2.25.0/kubespray/roles/download/tasks/download_file.yml': line 10, column 5, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n  - name: Download_file | Show url of file to dowload\n    ^ here\n"}
fatal: [node3]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: {{ download_defaults | combine(downloads.runc) }}: {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ download_defaults | combine(downloads.runc) }}: {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {'netcheck_server': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_server_image_repo }}', 'tag': '{{ netcheck_server_image_tag }}', 'sha256': '{{ netcheck_server_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'netcheck_agent': {'enabled': '{{ deploy_netchecker }}', 'container': True, 'repo': '{{ netcheck_agent_image_repo }}', 'tag': '{{ netcheck_agent_image_tag }}', 'sha256': '{{ netcheck_agent_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'etcd': {'container': \"{{ etcd_deployment_type != 'host' }}\", 'file': \"{{ etcd_deployment_type == 'host' }}\", 'enabled': True, 'version': '{{ etcd_version }}', 'dest': '{{ local_release_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz', 'repo': '{{ etcd_image_repo }}', 'tag': '{{ etcd_image_tag }}', 'sha256': \"{{ etcd_binary_checksum if (etcd_deployment_type == 'host') else etcd_digest_checksum | d(None) }}\", 'url': '{{ etcd_download_url }}', 'unarchive': \"{{ etcd_deployment_type == 'host' }}\", 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}, 'cni': {'enabled': True, 'file': True, 'version': '{{ cni_version }}', 'dest': '{{ local_release_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz', 'sha256': '{{ cni_binary_checksum }}', 'url': '{{ cni_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubeadm': {'enabled': True, 'file': True, 'version': '{{ kubeadm_version }}', 'dest': '{{ local_release_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}', 'sha256': '{{ kubeadm_binary_checksum }}', 'url': '{{ kubeadm_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubelet': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubelet_binary_checksum }}', 'url': '{{ kubelet_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kubectl': {'enabled': True, 'file': True, 'version': '{{ kube_version }}', 'dest': '{{ local_release_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}', 'sha256': '{{ kubectl_binary_checksum }}', 'url': '{{ kubectl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'crictl': {'file': True, 'enabled': True, 'version': '{{ crictl_version }}', 'dest': '{{ local_release_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ crictl_binary_checksum }}', 'url': '{{ crictl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crio': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ crio_version }}', 'dest': '{{ local_release_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}tar.gz', 'sha256': '{{ crio_archive_checksum }}', 'url': '{{ crio_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'cri_dockerd': {'file': True, 'enabled': \"{{ container_manager == 'docker' }}\", 'version': '{{ cri_dockerd_version }}', 'dest': '{{ local_release_dir }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tar.gz', 'sha256': '{{ cri_dockerd_archive_checksum }}', 'url': '{{ cri_dockerd_download_url }}', 'unarchive': True, 'unarchive_extra_opts': ['--strip=1'], 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'crun': {'file': True, 'enabled': '{{ crun_enabled }}', 'version': '{{ crun_version }}', 'dest': '{{ local_release_dir }}/crun-{{ crun_version }}-{{ image_arch }}', 'sha256': '{{ crun_binary_checksum }}', 'url': '{{ crun_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'youki': {'file': True, 'enabled': '{{ youki_enabled }}', 'version': '{{ youki_version }}', 'dest': \"{{ local_release_dir }}/youki_{{ youki_version | regex_replace('\\\\.', '_') }}_linux.tar.gz\", 'sha256': '{{ youki_archive_checksum }}', 'url': '{{ youki_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'runc': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ runc_version }}', 'dest': '{{ local_release_dir }}/runc-{{ runc_version }}.{{ image_arch }}', 'sha256': '{{ runc_binary_checksum }}', 'url': '{{ runc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'kata_containers': {'enabled': '{{ kata_containers_enabled }}', 'file': True, 'version': '{{ kata_containers_version }}', 'dest': '{{ local_release_dir }}/kata-static-{{ kata_containers_version }}-{{ image_arch }}.tar.xz', 'sha256': '{{ kata_containers_binary_checksum }}', 'url': '{{ kata_containers_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'containerd': {'enabled': \"{{ container_manager == 'containerd' }}\", 'file': True, 'version': '{{ containerd_version }}', 'dest': '{{ local_release_dir }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ containerd_archive_checksum }}', 'url': '{{ containerd_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'gvisor_runsc': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-runsc-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_runsc_binary_checksum }}', 'url': '{{ gvisor_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'gvisor_containerd_shim': {'enabled': '{{ gvisor_enabled }}', 'file': True, 'version': '{{ gvisor_version }}', 'dest': '{{ local_release_dir }}/gvisor-containerd-shim-runsc-v1-{{ gvisor_version }}-{{ ansible_architecture }}', 'sha256': '{{ gvisor_containerd_shim_binary_checksum }}', 'url': '{{ gvisor_containerd_shim_runsc_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': 755, 'groups': ['k8s_cluster']}, 'nerdctl': {'file': True, 'enabled': \"{{ container_manager == 'containerd' }}\", 'version': '{{ nerdctl_version }}', 'dest': '{{ local_release_dir }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ nerdctl_archive_checksum }}', 'url': '{{ nerdctl_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'skopeo': {'file': True, 'enabled': \"{{ container_manager == 'crio' }}\", 'version': '{{ skopeo_version }}', 'dest': '{{ local_release_dir }}/skopeo-{{ skopeo_version }}-{{ image_arch }}', 'sha256': '{{ skopeo_binary_checksum }}', 'url': '{{ skopeo_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'cilium': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_image_repo }}', 'tag': '{{ cilium_image_tag }}', 'sha256': '{{ cilium_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_operator': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'container': True, 'repo': '{{ cilium_operator_image_repo }}', 'tag': '{{ cilium_operator_image_tag }}', 'sha256': '{{ cilium_operator_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_relay': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_relay_image_repo }}', 'tag': '{{ cilium_hubble_relay_image_tag }}', 'sha256': '{{ cilium_hubble_relay_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_certgen': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_certgen_image_repo }}', 'tag': '{{ cilium_hubble_certgen_image_tag }}', 'sha256': '{{ cilium_hubble_certgen_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_image_repo }}', 'tag': '{{ cilium_hubble_ui_image_tag }}', 'sha256': '{{ cilium_hubble_ui_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_ui_backend': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_ui_backend_image_repo }}', 'tag': '{{ cilium_hubble_ui_backend_image_tag }}', 'sha256': '{{ cilium_hubble_ui_backend_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'cilium_hubble_envoy': {'enabled': '{{ cilium_enable_hubble }}', 'container': True, 'repo': '{{ cilium_hubble_envoy_image_repo }}', 'tag': '{{ cilium_hubble_envoy_image_tag }}', 'sha256': '{{ cilium_hubble_envoy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'ciliumcli': {'enabled': \"{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}\", 'file': True, 'version': '{{ cilium_cli_version }}', 'dest': '{{ local_release_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz', 'sha256': '{{ ciliumcli_binary_checksum }}', 'url': '{{ ciliumcli_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'multus': {'enabled': '{{ kube_network_plugin_multus }}', 'container': True, 'repo': '{{ multus_image_repo }}', 'tag': '{{ multus_image_tag }}', 'sha256': '{{ multus_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_image_repo }}', 'tag': '{{ flannel_image_tag }}', 'sha256': '{{ flannel_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'flannel_init': {'enabled': \"{{ kube_network_plugin == 'flannel' }}\", 'container': True, 'repo': '{{ flannel_init_image_repo }}', 'tag': '{{ flannel_init_image_tag }}', 'sha256': '{{ flannel_init_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calicoctl': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'file': True, 'version': '{{ calico_ctl_version }}', 'dest': '{{ local_release_dir }}/calicoctl-{{ calico_ctl_version }}-{{ image_arch }}', 'sha256': '{{ calicoctl_binary_checksum }}', 'url': '{{ calicoctl_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}, 'calico_node': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_node_image_repo }}', 'tag': '{{ calico_node_image_tag }}', 'sha256': '{{ calico_node_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_cni': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_cni_image_repo }}', 'tag': '{{ calico_cni_image_tag }}', 'sha256': '{{ calico_cni_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_flexvol': {'enabled': \"{{ kube_network_plugin == 'calico' }}\", 'container': True, 'repo': '{{ calico_flexvol_image_repo }}', 'tag': '{{ calico_flexvol_image_tag }}', 'sha256': '{{ calico_flexvol_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_policy': {'enabled': \"{{ enable_network_policy and kube_network_plugin in ['calico'] }}\", 'container': True, 'repo': '{{ calico_policy_image_repo }}', 'tag': '{{ calico_policy_image_tag }}', 'sha256': '{{ calico_policy_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_typha': {'enabled': '{{ typha_enabled }}', 'container': True, 'repo': '{{ calico_typha_image_repo }}', 'tag': '{{ calico_typha_image_tag }}', 'sha256': '{{ calico_typha_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_apiserver': {'enabled': '{{ calico_apiserver_enabled }}', 'container': True, 'repo': '{{ calico_apiserver_image_repo }}', 'tag': '{{ calico_apiserver_image_tag }}', 'sha256': '{{ calico_apiserver_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'calico_crds': {'file': True, 'enabled': \"{{ kube_network_plugin == 'calico' and calico_datastore == 'kdd' }}\", 'version': '{{ calico_version }}', 'dest': '{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ calico_version }}.tar.gz', 'sha256': '{{ calico_crds_archive_checksum }}', 'url': '{{ calico_crds_download_url }}', 'unarchive': True, 'unarchive_extra_opts': [\"{{ '--strip=6' if (calico_version is version('v3.22.3', '<')) else '--strip=3' }}\", '--wildcards', \"{{ '*/_includes/charts/calico/crds/kdd/' if (calico_version is version('v3.22.3', '<')) else '*/libcalico-go/config/crd/' }}\"], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'weave_kube': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_kube_image_repo }}', 'tag': '{{ weave_kube_image_tag }}', 'sha256': '{{ weave_kube_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'weave_npc': {'enabled': \"{{ kube_network_plugin == 'weave' }}\", 'container': True, 'repo': '{{ weave_npc_image_repo }}', 'tag': '{{ weave_npc_image_tag }}', 'sha256': '{{ weave_npc_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_ovn': {'enabled': \"{{ kube_network_plugin == 'kube-ovn' }}\", 'container': True, 'repo': '{{ kube_ovn_container_image_repo }}', 'tag': '{{ kube_ovn_container_image_tag }}', 'sha256': '{{ kube_ovn_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube_router': {'enabled': \"{{ kube_network_plugin == 'kube-router' }}\", 'container': True, 'repo': '{{ kube_router_image_repo }}', 'tag': '{{ kube_router_image_tag }}', 'sha256': '{{ kube_router_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'pod_infra': {'enabled': True, 'container': True, 'repo': '{{ pod_infra_image_repo }}', 'tag': '{{ pod_infra_image_tag }}', 'sha256': '{{ pod_infra_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'kube-vip': {'enabled': '{{ kube_vip_enabled }}', 'container': True, 'repo': '{{ kube_vip_image_repo }}', 'tag': '{{ kube_vip_image_tag }}', 'sha256': '{{ kube_vip_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'nginx': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'nginx' }}\", 'container': True, 'repo': '{{ nginx_image_repo }}', 'tag': '{{ nginx_image_tag }}', 'sha256': '{{ nginx_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'haproxy': {'enabled': \"{{ loadbalancer_apiserver_localhost and loadbalancer_apiserver_type == 'haproxy' }}\", 'container': True, 'repo': '{{ haproxy_image_repo }}', 'tag': '{{ haproxy_image_tag }}', 'sha256': '{{ haproxy_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'coredns': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ coredns_image_repo }}', 'tag': '{{ coredns_image_tag }}', 'sha256': '{{ coredns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'nodelocaldns': {'enabled': '{{ enable_nodelocaldns }}', 'container': True, 'repo': '{{ nodelocaldns_image_repo }}', 'tag': '{{ nodelocaldns_image_tag }}', 'sha256': '{{ nodelocaldns_digest_checksum | default(None) }}', 'groups': ['k8s_cluster']}, 'dnsautoscaler': {'enabled': \"{{ dns_mode in ['coredns', 'coredns_dual'] }}\", 'container': True, 'repo': '{{ dnsautoscaler_image_repo }}', 'tag': '{{ dnsautoscaler_image_tag }}', 'sha256': '{{ dnsautoscaler_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'helm': {'enabled': '{{ helm_enabled }}', 'file': True, 'version': '{{ helm_version }}', 'dest': '{{ local_release_dir }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz', 'sha256': '{{ helm_archive_checksum }}', 'url': '{{ helm_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'krew': {'enabled': '{{ krew_enabled }}', 'file': True, 'version': '{{ krew_version }}', 'dest': '{{ local_release_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz', 'sha256': '{{ krew_archive_checksum }}', 'url': '{{ krew_download_url }}', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}, 'registry': {'enabled': '{{ registry_enabled }}', 'container': True, 'repo': '{{ registry_image_repo }}', 'tag': '{{ registry_image_tag }}', 'sha256': '{{ registry_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'metrics_server': {'enabled': '{{ metrics_server_enabled }}', 'container': True, 'repo': '{{ metrics_server_image_repo }}', 'tag': '{{ metrics_server_image_tag }}', 'sha256': '{{ metrics_server_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'local_volume_provisioner': {'enabled': '{{ local_volume_provisioner_enabled }}', 'container': True, 'repo': '{{ local_volume_provisioner_image_repo }}', 'tag': '{{ local_volume_provisioner_image_tag }}', 'sha256': '{{ local_volume_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cephfs_provisioner': {'enabled': '{{ cephfs_provisioner_enabled }}', 'container': True, 'repo': '{{ cephfs_provisioner_image_repo }}', 'tag': '{{ cephfs_provisioner_image_tag }}', 'sha256': '{{ cephfs_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'rbd_provisioner': {'enabled': '{{ rbd_provisioner_enabled }}', 'container': True, 'repo': '{{ rbd_provisioner_image_repo }}', 'tag': '{{ rbd_provisioner_image_tag }}', 'sha256': '{{ rbd_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'local_path_provisioner': {'enabled': '{{ local_path_provisioner_enabled }}', 'container': True, 'repo': '{{ local_path_provisioner_image_repo }}', 'tag': '{{ local_path_provisioner_image_tag }}', 'sha256': '{{ local_path_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_nginx_controller': {'enabled': '{{ ingress_nginx_enabled }}', 'container': True, 'repo': '{{ ingress_nginx_controller_image_repo }}', 'tag': '{{ ingress_nginx_controller_image_tag }}', 'sha256': '{{ ingress_nginx_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'ingress_alb_controller': {'enabled': '{{ ingress_alb_enabled }}', 'container': True, 'repo': '{{ alb_ingress_image_repo }}', 'tag': '{{ alb_ingress_image_tag }}', 'sha256': '{{ ingress_alb_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_controller': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_controller_image_repo }}', 'tag': '{{ cert_manager_controller_image_tag }}', 'sha256': '{{ cert_manager_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_cainjector': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_cainjector_image_repo }}', 'tag': '{{ cert_manager_cainjector_image_tag }}', 'sha256': '{{ cert_manager_cainjector_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cert_manager_webhook': {'enabled': '{{ cert_manager_enabled }}', 'container': True, 'repo': '{{ cert_manager_webhook_image_repo }}', 'tag': '{{ cert_manager_webhook_image_tag }}', 'sha256': '{{ cert_manager_webhook_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_attacher': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_attacher_image_repo }}', 'tag': '{{ csi_attacher_image_tag }}', 'sha256': '{{ csi_attacher_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_provisioner': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_provisioner_image_repo }}', 'tag': '{{ csi_provisioner_image_tag }}', 'sha256': '{{ csi_provisioner_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_snapshotter': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_snapshotter_image_repo }}', 'tag': '{{ csi_snapshotter_image_tag }}', 'sha256': '{{ csi_snapshotter_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'snapshot_controller': {'enabled': '{{ csi_snapshot_controller_enabled }}', 'container': True, 'repo': '{{ snapshot_controller_image_repo }}', 'tag': '{{ snapshot_controller_image_tag }}', 'sha256': '{{ snapshot_controller_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_resizer': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_resizer_image_repo }}', 'tag': '{{ csi_resizer_image_tag }}', 'sha256': '{{ csi_resizer_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'csi_node_driver_registrar': {'enabled': '{{ cinder_csi_enabled or aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ csi_node_driver_registrar_image_repo }}', 'tag': '{{ csi_node_driver_registrar_image_tag }}', 'sha256': '{{ csi_node_driver_registrar_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'cinder_csi_plugin': {'enabled': '{{ cinder_csi_enabled }}', 'container': True, 'repo': '{{ cinder_csi_plugin_image_repo }}', 'tag': '{{ cinder_csi_plugin_image_tag }}', 'sha256': '{{ cinder_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'aws_ebs_csi_plugin': {'enabled': '{{ aws_ebs_csi_enabled }}', 'container': True, 'repo': '{{ aws_ebs_csi_plugin_image_repo }}', 'tag': '{{ aws_ebs_csi_plugin_image_tag }}', 'sha256': '{{ aws_ebs_csi_plugin_digest_checksum | default(None) }}', 'groups': ['kube_node']}, 'dashboard': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_image_repo }}', 'tag': '{{ dashboard_image_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'dashboard_metrics_scrapper': {'enabled': '{{ dashboard_enabled }}', 'container': True, 'repo': '{{ dashboard_metrics_scraper_repo }}', 'tag': '{{ dashboard_metrics_scraper_tag }}', 'sha256': '{{ dashboard_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_speaker': {'enabled': '{{ metallb_speaker_enabled }}', 'container': True, 'repo': '{{ metallb_speaker_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_speaker_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'metallb_controller': {'enabled': '{{ metallb_enabled }}', 'container': True, 'repo': '{{ metallb_controller_image_repo }}', 'tag': '{{ metallb_version }}', 'sha256': '{{ metallb_controller_digest_checksum | default(None) }}', 'groups': ['kube_control_plane']}, 'yq': {'enabled': '{{ argocd_enabled }}', 'file': True, 'version': '{{ yq_version }}', 'dest': '{{ local_release_dir }}/yq-{{ yq_version }}-{{ image_arch }}', 'sha256': '{{ yq_binary_checksum | default(None) }}', 'url': '{{ yq_download_url }}', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}}: {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'. {{ etcd_supported_versions[kube_major_version] }}: 'dict object' has no attribute 'v1.32'. 'dict object' has no attribute 'v1.32'\n\nThe error appears to be in '/Users/xiilab/Develop/astrago/astrago-deployment/kubespray/versions/v2.25.0/kubespray/roles/download/tasks/download_file.yml': line 10, column 5, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n  - name: Download_file | Show url of file to dowload\n    ^ here\n"}

NO MORE HOSTS LEFT *************************************************************

PLAY RECAP *********************************************************************
node1                      : ok=137  changed=12   unreachable=0    failed=1    skipped=137  rescued=0    ignored=0   
node2                      : ok=102  changed=9    unreachable=0    failed=1    skipped=124  rescued=0    ignored=0   
node3                      : ok=102  changed=9    unreachable=0    failed=1    skipped=124  rescued=0    ignored=0   

수요일 10 9월 2025  08:32:25 +0900 (0:00:00.038)       0:02:41.641 **************** 
=============================================================================== 
remove-node/pre-remove : Remove-node | Drain node except daemonsets resource -- 32.74s
network_plugin/calico : Check if calico ready -------------------------- 31.90s
kubernetes/preinstall : Preinstall | restart kube-apiserver crio/containerd -- 30.12s
container-engine/validate-container-engine : Populate service facts ----- 9.00s
bootstrap-os : Assign inventory name to unconfigured hostnames (non-CoreOS, non-Flatcar, Suse and ClearLinux, non-Fedora) --- 3.98s
Gather necessary facts (network) ---------------------------------------- 3.60s
Gather necessary facts (hardware) --------------------------------------- 2.71s
bootstrap-os : Gather facts --------------------------------------------- 2.40s
kubernetes/preinstall : Ensure ping package ----------------------------- 1.93s
kubernetes/preinstall : Install packages requirements ------------------- 1.93s
kubernetes/preinstall : Ensure kubelet expected parameters are set ------ 1.86s
Gather minimal facts ---------------------------------------------------- 1.84s
kubernetes/preinstall : Preinstall | Restart systemd-resolved ----------- 1.34s
kubernetes/preinstall : Create kubernetes directories ------------------- 1.26s
kubernetes/preinstall : Update package management cache (APT) ----------- 1.21s
container-engine/runc : Runc | Uninstall runc package managed by package manager --- 1.15s
kubernetes/preinstall : Write Kubespray DNS settings to systemd-resolved --- 1.02s
kubernetes/preinstall : Update facts ------------------------------------ 0.82s
kubernetes/preinstall : Remove swapfile from /etc/fstab ----------------- 0.82s
kubernetes/preinstall : Mask swap.target (persist swapoff) -------------- 0.79s
